/* 
 *
 * SchemaCrawler
 * http://sourceforge.net/projects/schemacrawler
 * Copyright (c) 2000-2009, Sualeh Fatehi.
 *
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation;
 * either version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this
 * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 */

package schemacrawler.tools.integration.dot;


import java.awt.Color;
import java.io.Writer;

import schemacrawler.Version;
import schemacrawler.schema.Catalog;
import schemacrawler.schema.Schema;
import schemacrawler.tools.integration.SchemaRenderer;
import schemacrawler.tools.util.HtmlFormattingHelper;
import sf.util.Utilities;

/**
 * Main executor for the dot engine integration.
 * 
 * @author Sualeh Fatehi
 */
public final class DotRenderer
  extends SchemaRenderer
{

  public static final String NEWLINE = System.getProperty("line.separator");

  /**
   * {@inheritDoc}
   * 
   * @see schemacrawler.tools.integration.TemplatedSchemaRenderer#render(java.lang.String,
   *      schemacrawler.schema.Schema, java.io.Writer)
   */
  @Override
  protected void render(final String dotFileName,
                        final Catalog catalog,
                        final Writer writer)
    throws Exception
  {
    if (catalog == null || writer == null)
    {
      return;
    }

    writer.write(dotHeader(catalog.getName()));
    for (final Schema schema: catalog.getSchemas())
    {

    }
    writer.write("}\n");
    writer.flush();
    writer.close();
  }

  private static String dotHeader(final String name)
  {
    final byte[] text = Utilities.readFully(HtmlFormattingHelper.class
      .getResourceAsStream("/dot.header.txt"));
    final String dotHeader = new String(text);
    return String.format(dotHeader, name, "Generated by " + Version.about());
  }

  private int colorValue()
  {
    final int colorBase = 120;
    return (int) (Math.random() * (255 - colorBase) + colorBase);
  }

  private Color newPastel()
  {
    return new Color(colorValue(), colorValue(), colorValue());
  }

}
